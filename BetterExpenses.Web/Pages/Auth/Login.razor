@page "/auth/login"
@using BetterExpenses.Common.DTO.Auth
@using BetterExpenses.Web.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<div class="container">
    <h1>Login</h1>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>
                
                @if (_showErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @_error
                    </div>
                }

                <div class="form-group mb-3">
                    <label for="email">Email address</label>
                    <InputText disabled="@_busy" Id="email" Class="form-control" @bind-Value="_loginModel.Email"/>
                    <ValidationMessage For="@(() => _loginModel.Email)"/>
                </div>
                <div class="form-group mb-3">
                    <label for="password">Password</label>
                    <InputText disabled="@_busy" Id="password" type="password" Class="form-control" @bind-Value="_loginModel.Password"/>
                    <ValidationMessage For="@(() => _loginModel.Password)"/>
                </div>
                <div class="row mb-3">
                    <div class="col-auto">
                        <button disabled="@_busy" type="submit" class="btn btn-primary">
                            <span role="status">Login</span>
                            <span class="spinner-border spinner-border-sm @(_busy ? null : "visually-hidden")" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
                <p>
                    <a href="/auth/register">Register</a>
                </p>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private readonly LoginModel _loginModel = new();
    private bool _showErrors;
    private string _error = "";
    private bool _busy;

    private async Task HandleLogin()
    {
        _showErrors = false;
        _busy = true;

        try
        {
            var result = await AuthService.Login(_loginModel);

            if (result.Successful)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _error = result.Error ?? "Login failed";
                _showErrors = true;
            }
        }
        finally
        {
            _busy = false;
        }
        
    }

}
