@page "/auth/register"
@using BetterExpenses.Common.DTO.Auth
@using BetterExpenses.Web.Services
@using BetterExpenses.Web.Services.Api
@inject IAuthApiService AuthApiService
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<div class="container">
    <h1>Register</h1>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="_registerModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator/>
                @if (_showErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in _errors ?? [])
                        {
                            @error<br/>
                        }
                    </div>
                }

                <div class="form-group mb-3">
                    <label for="email">Email address</label>
                    <InputText Id="email" class="form-control" @bind-Value="_registerModel.Email"/>
                    <ValidationMessage For="@(() => _registerModel.Email)"/>
                </div>
                <div class="form-group mb-3">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="_registerModel.Password"/>
                    <ValidationMessage For="@(() => _registerModel.Password)"/>
                </div>
                <div class="form-group mb-3">
                    <label for="password">Confirm Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="_registerModel.ConfirmPassword"/>
                    <ValidationMessage For="@(() => _registerModel.ConfirmPassword)"/>
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>
</div>
@code {

    private readonly RegisterModel _registerModel = new();
    private bool _showErrors;
    private IEnumerable<string>? _errors;

    private async Task HandleRegistration()
    {
        _showErrors = false;

        var result = await AuthApiService.Register(_registerModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/auth/login");
        }
        else
        {
            _errors = result.Errors ?? ["Registration failed"];
            _showErrors = true;
        }
    }

}