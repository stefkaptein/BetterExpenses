@page "/Auth/UserSettings"
@using BetterExpenses.Common.DTO.User
@using BetterExpenses.Common.Models.User
@using BetterExpenses.Web.Components.Settings
@using BetterExpenses.Web.Components
@using BetterExpenses.Web.Services.Api
@inject NavigationManager NavManager
@inject IAuthApiService AuthApiService
@inject IUserApiService UserApiService

<div class="container">
    <div class="row">
        <div class="col-md-6 col-sm-12">
            <div class="row mb-2">
                <Loading Loaded="_userSettingsLoaded">
                    <BunqConnectionStatus Linked="_userSettingsValue!.BunqLinked" OnButtonClick="ButtonClicked"/>
                </Loading>
            </div>
            <div class="row mb-2">
                <UserTaskButtons/>
            </div>
        </div>
        <div class="col-md-6 col-sm-12">
            <div class="row mb-2">
                <Loading Loaded="_userMonetaryAccountsLoaded">
                    @foreach (var account in _userMonetaryAccounts!)
                    {
                        <MonetaryAccountSettings Account="account"/>
                    }
                </Loading>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _userSettingsLoaded;
    private UserSettingsDto? _userSettingsValue;
    private bool _userMonetaryAccountsLoaded;
    private List<UserMonetaryAccount>? _userMonetaryAccounts;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var settingsTask = UserApiService.GetUserSettings();
        var accountsTask = UserApiService.GetUserAccounts();
        
        await Task.WhenAll(settingsTask, accountsTask);
        
        _userSettingsValue = await settingsTask;
        _userSettingsLoaded = true;
        _userMonetaryAccounts = await accountsTask;
        _userMonetaryAccountsLoaded = true;
    }

    private async Task ButtonClicked()
    {
        if (!_userSettingsValue!.BunqLinked)
        {
            await LinkBunq();
        }
        else
        {
            await UnlinkBunq();
        }
        
    }

    private async Task UnlinkBunq()
    {
        if (!await AuthApiService.UnlinkBunq())
        {
            // TODO: Display error somewhere
        }
    }

    private async Task LinkBunq()
    {
        var url = await AuthApiService.GetLinkBunqAuthUrl();
        if (string.IsNullOrEmpty(url))
        {
            // TODO: Display error somewhere
            return;
        }
        NavManager.NavigateTo(url);
    }
}
